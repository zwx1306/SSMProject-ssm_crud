<?xml version="1.0" encoding="UTF-8"?>
<!-- xmlns:tx spring声明式事务管理相关约束-->
<beans
        xmlns="http://www.springframework.org/schema/beans"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:aop="http://www.springframework.org/schema/aop"
        xmlns:tx="http://www.springframework.org/schema/tx"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
    ">

    <context:component-scan base-package="com.ecut">
        <!--配置不用扫描的包，controller是由springmvc处理的-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>


    <!--// 配置一个可以执行批量的sqlSession -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
        <!--BATCH执行器会重用预处理语句，并执行批量更新-->
        <constructor-arg name="executorType" value="BATCH"/>
    </bean>




    <!--  11111111111与数据源-->


    <!-- 1. Spring的配置文件 配置和业务逻辑有关的 -->
    <!-- 数据源 事务控制 -->
 <!-- c3p0 数据源 -->
    <context:property-placeholder location="classpath:dbcConfig.properties"></context:property-placeholder>
    <bean id="pooledDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/>
        <property name="driverClass" value="${jdbc.driverClass}"/>
        <property name="user" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>





    <!--  22222222222与mybatis整合-->

    <!-- 配置和mybatis的整合 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 指定mybatis配置文件 -->
        <property name="configLocation" value="classpath:mybatisConfig.xml"></property>
        <property name="dataSource" ref="pooledDataSource"></property>
        <property name="mapperLocations" value="classpath:mapper/*.xml"></property>

</bean>
    <!-- 配置扫描器 将mybatis 接口的实现加入到ioc容器中 -->
    <bean id="mapperscanner" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 扫描所以dao接口的实现 加入到 ioc容器中 -->
        <property name="basePackage" value="com.ecut.dao"></property>
    </bean>






    <!-- 33333333333333配置事务控制 -->

    <!-- 事务控制的配置 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <!-- 控制数据源 -->
        <property name="dataSource" ref="pooledDataSource"></property>

    </bean>

    <!--开启基于注解的事务，使用xml配置形式的事务（比较主要的都是使用配置式）-->
    <aop:config>
        <!--切入点表达式-->
        <aop:pointcut id="txPoint" expression="execution(* com.ecut.service..*(..))"/>
        <!--配置事务增强-->
        <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"/>
    </aop:config>


    <!--配置事务增强，事务如何切入-->
    <!--< aop:advisor>大多用于事务管理，代替< aop:aspect>-->
    <tx:advice id="txAdvice">
        <tx:attributes>
            <!--所有方法都是事务方法-->
            <tx:method name="*"/>
            <!--以get开始的所有方法-->
            <tx:method name="get*" read-only="true"/>
        </tx:attributes>
    </tx:advice>


    <!--Spring配置文件的核心点  （      数据源，与mybatis的整合，事务控制         ）-->




</beans>